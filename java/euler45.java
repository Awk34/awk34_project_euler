/*
 * Andrew Koroluk
 */

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;

public class euler45 {
	public static void main(String[] args) {
		ArrayList<BigInteger> tri = new ArrayList<BigInteger>();
		//ArrayList<Integer> pent = new ArrayList<Integer>();
		//ArrayList<Integer> hex = new ArrayList<Integer>();
		
		for(BigInteger n=new BigInteger("286"); n.compareTo(new BigInteger("1000000"))==-1; n=n.add(BigInteger.ONE)) {
			tri.add( n.multiply((n.add(BigInteger.ONE))).divide(new BigInteger("2")) );
			//pent.add( n*(3*n-1)/2 );
			//hex.add( n*(2*n-1) );
		}
		//System.out.println(tri);
		//System.out.println(pent);
		//System.out.println(hex);
		
		int i=0;
		while(true) {
			BigInteger x=tri.get(i);
			
			if(isPentagonal(x))
				if(isHexagonal(x))
					System.out.println(x);
			
			i++;
		}
	}
	static boolean isPentagonal(int n) {
		double p = ((Math.sqrt(1 + 24*n) + 1) / 6);
		return p == (int) p;
	}
	static boolean isHexagonal(int n) {
		double p = ((Math.sqrt(1 + 8*n) + 1) / 4);
		return p == (int) p;
	}
	static boolean isPentagonal(BigInteger n) {
		try {
			BigDecimal p = ((new BigSquareRoot().get(BigInteger.ONE.add(n.multiply(new BigInteger("24")))).add(BigDecimal.ONE)).divide(new BigDecimal("6")));
			return p.compareTo( p.setScale(0, BigDecimal.ROUND_HALF_UP) )==0;
		} catch(ArithmeticException e) {return false;}
	}
	static boolean isHexagonal(BigInteger n) {
		try {
			BigDecimal p = ((new BigSquareRoot().get(BigInteger.ONE.add(n.multiply(new BigInteger("8")))).add(BigDecimal.ONE)).divide(new BigDecimal("4")));
			return p.compareTo( p.setScale(0, BigDecimal.ROUND_HALF_UP) )==0;
		} catch(ArithmeticException e) {return false;}
	}
}
/*
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n*(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n*(3*n-1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n*(2*n-1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
*/